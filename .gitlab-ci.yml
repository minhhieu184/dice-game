stages:
  - build
  - deploy

# BUILD STAGE
.build_template:
  stage: build
  interruptible: true
  before_script:
    - cat $ENV_FILE > .env.stg
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -f Dockerfile.stg -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest

build:
  extends: .build_template
  environment: staging
  tags:
    - dev2-shell
  only:
    - develop
    - release

# DEPLOY STAGE
.deploy_template:
  stage: deploy
  interruptible: true
  variables:
    GIT_STRATEGY: none
  tags:
    - dev2-ssh-dev1
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest
    - docker stop $APP_NAME || true
    - docker run --rm --name $APP_NAME -d -p $FORWARD_PORT:$PORT --network $APP_NETWORK $CI_REGISTRY_IMAGE:latest
    - docker image prune -f
deploy:
  extends: .deploy_template
  environment: staging
  only:
    - develop
#
# deploy-prod:
#   only:
#     - release
#   stage: deploy
#   environment: production
#   tags:
#     - shell
#   # before_script:
#   #   - !reference [deploy-stg, before_script]
#   before_script:
#     # check ssh-agent already installed
#     - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
#     # run ssh-agent
#     - eval $(ssh-agent -s)
#     # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#     # create the SSH directory and give it the right permissions
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     # add known hosts to ignore confirm host
#     - ssh-keyscan $SSH_SERVER_IP >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#   script:
#     - export EXPORT_STRING=$(env | grep '^CI_REGISTRY' | awk -F= '{print "export " $1 "=" $2}' | xargs echo)
#     - echo $EXPORT_STRING
#     - echo $SSH_USER
#     - echo $SSH_SERVER_IP
#     - >
#       ssh $SSH_USER@$SSH_SERVER_IP
#       "${EXPORT_STRING};
#       export APP_NAME=$APP_NAME;
#       env > /home/ubuntu/env.txt;
#       docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY};
#       docker pull $CI_REGISTRY_IMAGE:latest;
#       docker stop $APP_NAME || true;
#       docker run --rm --name $APP_NAME -d -p $PORT:3000 $CI_REGISTRY_IMAGE:latest;
#       docker image prune -f;"
